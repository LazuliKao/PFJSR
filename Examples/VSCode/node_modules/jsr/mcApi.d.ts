//by gxh
//TypeScriptApi for JSR
/**
 * 功能:注册玩家事件加载前监听器
 * 参数个数：2个
 * 返回值：
 * @param key 注册用关键字
 * @param func 供事件触发时的回调函数对象
 */
declare function addBeforeActListener(key:string,func:any)
/**
 * 功能:移除玩家事件监听器
 * 参数个数：1个
 * 返回值：旧的监听器
 * @param key 注册用关键字
 */
declare function removeBeforeActListener(key:string)
/**
 * 功能:注册玩家事件加载后监听器
 * 参数个数：2个
 * 返回值：
 * @param key 注册用关键字
 * @param func 供事件触发时的回调函数对象
 */
declare function addAfterActListener(key:string,func:any)
/**
 * 功能:移除玩家事件加载后监听器
 * 参数个数：1个
 * 返回值：旧监听器
 * @param key 注册用关键字
 */
declare function removeAfterActListener(key:string)
/**
 * 功能:发送一个函数至下一tick运行
 * 参数个数：1个
 * 返回值：
 * @param func 待置入下一tick执行的函数
 */
declare function postTick(func:any)
/**
 * 功能:设置一个全局指令说明
 * 参数个数：2个
 * 返回值：
 * @param cmd 命令
 * @param description 命令说明
 */
declare function setCommandDescribe(cmd:string,description:string)
/**
 * 功能:执行后台指令
 * 参数个数：1个
 * 返回值：是否正常执行
 * @param cmd 语法正确的MC指令
 */
declare function runcmd(cmd:string)
/**
 * 功能:发送一条命令输出消息（可被拦截）
 * 参数个数：1个
 * 返回值：
 * @param cmdout 待发送的命令输出字符串
 */
declare function logout(cmdout:string)
/**
 * 功能:获取在线玩家列表
 * 参数个数：0个
 * 返回值：玩家列表的Json字符串
 */
declare function getOnLinePlayers()
/**
 * 功能:获取一个结构
 * 参数个数：5个
 * 返回值：结构json字符串
 * @param dimensionid 地图维度
 * @param posa 坐标JSON字符串
 * @param posb 坐标JSON字符串
 * @param exent 是否导出实体
 * @param exblk 是否导出方块
 */
declare function getStructure(dimensionid:number,posa:string,posb:string,exent:any,exblk:any)
/**
 * 功能:设置一个结构到指定位置
 * 参数个数：6个
 * 返回值：是否设置成功
 * @param strnbt 结构JSON字符串
 * @param dimensionid 地图维度
 * @param posa 起始点坐标JSON字符串
 * @param rot 旋转类型
 * @param exent 是否导入实体
 * @param exblk 是否导入方块
 */
declare function setStructure(strnbt:string,dimensionid:number,posa:string,rot:number,exent:any,exblk:any)
/**
 * 功能:设置服务器的显示名信息
 * 参数个数：2个
 * 返回值：是否设置成功
 * @param motd 新服务器显示名信息
 * @param isShow 是否公开显示
 */
declare function setServerMotd(motd:string,isShow:any)
/**
 * 功能:使用官方脚本引擎新增一段行为包脚本并执行
 * 参数个数：2个
 * 返回值：
 * @param js 脚本文本
 * @param cb 执行结果回调
 */
declare function JSErunScript(js:string,cb:any)
/**
 * 功能:使用官方脚本引擎发送一个自定义事件广播
 * 参数个数：3个
 * 返回值：
 * @param ename 自定义事件名称（不能以minecraft:开头）
 * @param jdata 事件内容文本
 * @param cb 执行结果回调
 */
declare function JSEfireCustomEvent(ename:string,jdata:string,cb:any)
/**
 * 功能:获取指定ID对应于计分板上的数值
 * 参数个数：2个
 * 返回值：获取的目标值，若目标不存在则返回0
 * @param id 离线计分板的ID
 * @param objname 计分板登记的名称（若不存在则自动添加）
 */
declare function getscoreById(id:number,objname:string)
/**
 * 功能:设置指定ID对应于计分板上的数值
 * 参数个数：3个
 * 返回值：设置后的目标值，若未成功则返回0
 * @param id 离线计分板的ID
 * @param objname 计分板登记的名称（若不存在则自动添加）
 * @param count 待设置的值
 */
declare function setscoreById(id:number,objname:string,count:number)
/**
 * 功能:获取所有计分板计分项
 * 参数个数：0个
 * 返回值：NBT格式的计分板json字符串
 */
declare function getAllScore()
/**
 * 功能:设置所有计分板计分项
 * 参数个数：1个
 * 返回值：是否设置成功
 * @param jdata NBT格式的计分板json字符串
 */
declare function setAllScore(jdata:string)
/**
 * 功能:获取一个指定位置处区块的颜色数据
 * 参数个数：4个
 * 返回值：区块位置及颜色数据内容
 * @param x X
 * @param y Y
 * @param z Z
 * @param did 待读取的维度
 */
declare function getMapColors(x:number,y:number,z:number,did:number)
/**
 * 功能:导出地图所有离线玩家数据
 * 参数个数：0个
 * 返回值：玩家数据信息集
 */
declare function exportPlayersData()
/**
 * 功能:导入玩家数据至地图
 * 参数个数：1个
 * 返回值：是否操作成功
 * @param jdata 待导入的玩家信息集json字符串
 */
declare function importPlayersData(jdata:string)
