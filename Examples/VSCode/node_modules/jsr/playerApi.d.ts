/**
 * 功能:重命名一个指定的玩家名
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param newName 新的名称
 * 返回值：是否命名成功
 */
declare function reNameByUuid(uuid:string,newName:string)
/**
 * 功能:获取玩家能力表
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：能力json字符串
 */
declare function getPlayerAbilities(uuid:string)
/**
 * 功能:设置玩家能力表
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param newAbilities 新能力json数据字符串
 * 返回值：是否设置成功
 */
declare function setPlayerAbilities(uuid:string,newAbilities:string)
/**
 * 功能:获取玩家属性表
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：属性json字符串
 */
declare function getPlayerAttributes(uuid:string)
/**
 * 功能:设置玩家属性临时值表
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param newTempAttributes 新属性临时值json数据字符串
 * 返回值：是否设置成功
 */
declare function setPlayerTempAttributes(uuid:string,newTempAttributes:string)
/**
 * 功能:获取玩家属性上限值表
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：属性上限值json字符串
 */
declare function getPlayerMaxAttributes(uuid:string)
/**
 * 功能:设置玩家属性上限值表
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param newMaxAttributes 新属性上限值json数据字符串
 * 返回值：是否设置成功
 */
declare function setPlayerMaxAttributes(uuid:string,newMaxAttributes:string)
/**
 * 功能:获取玩家所有物品列表
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：物品列表json字符串
 */
declare function getPlayerItems(uuid:string)
/**
 * 功能:获取玩家当前选中项信息
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：当前选中项信息json字符串
 */
declare function getPlayerSelectedItem(uuid:string)
/**
 * 功能:设置玩家所有物品列表
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param newItems 新物品列表json数据字符串
 * 返回值：是否设置成功
 */
declare function setPlayerItems(uuid:string,newItems:string)
/**
 * 功能:增加玩家一个物品
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param item 物品json数据字符串
 * 返回值：是否添加成功
 */
declare function addPlayerItemEx(uuid:string,item:string)
/**
 * 功能:增加玩家一个物品
 * 参数个数：4个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：是否增加成功
 */
declare function addPlayerItem(uuid:string)
/**
 * 功能:获取玩家所有效果列表
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：效果列表json字符串
 */
declare function getPlayerEffects(uuid:string)
/**
 * 功能:设置玩家所有效果列表
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param newEffects 新效果列表json数据字符串
 * 返回值：是否设置成功
 */
declare function setPlayerEffects(uuid:string,newEffects:string)
/**
 * 功能:设置玩家自定义血条
 * 参数个数：3个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param title 血条标题
 * @param percent 血条百分比
 * 返回值：是否设置成功
 */
declare function setPlayerBossBar(uuid:string,title:string,percent:number)
/**
 * 功能:清除玩家自定义血条
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：是否清除成功
 */
declare function removePlayerBossBar(uuid:string)
/**
 * 功能:查询在线玩家基本信息
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：玩家基本信息json字符串
 */
declare function selectPlayer(uuid:string)
/**
 * 功能:传送玩家至指定服务器
 * 参数个数：3个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param addr 待传服务器
 * @param port 端口
 * 返回值：是否传送成功
 */
declare function transferserver(uuid:string,addr:string,port:number)
/**
 * 功能:传送玩家至指定坐标和维度
 * 参数个数：5个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param X x
 * @param Y y
 * @param Z z
 * @param dimensionid 维度ID
 * 返回值：是否传送成功
 */
declare function teleport(uuid:string,X:number,Y:number,Z:number,dimensionid:number)
/**
 * 功能:模拟玩家发送一个文本
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param msg 待模拟发送的文本
 * 返回值：是否发送成功
 */
declare function talkAs(uuid:string,msg:string)
/**
 * 功能:模拟玩家执行一个指令
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param cmd 待模拟执行的指令
 * 返回值：是否发送成功
 */
declare function runcmdAs(uuid:string,cmd:string)
/**
 * 功能:向指定的玩家发送一个简单表单
 * 参数个数：4个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param title 表单标题
 * @param content 内容
 * @param buttons 按钮文本数组字符串
 * 返回值：创建的表单id，为 0 表示发送失败
 */
declare function sendSimpleForm(uuid:string,title:string,content:string,buttons:string)
/**
 * 功能:向指定的玩家发送一个模式对话框
 * 参数个数：5个个参数
 * 返回值：创建的表单id，为 0 表示发送失败
 */
declare function sendModalForm()
/**
 * 功能:向指定的玩家发送一个自定义表单
 * 参数个数：2个个参数
 * 返回值：创建的表单id，为 0 表示发送失败
 */
declare function sendCustomForm()
/**
 * 功能:放弃一个表单
 * 参数个数：1个个参数
 * @param formid 表单id
 * 返回值：是否释放成功
 */
declare function releaseForm(formid:number)
/**
 * 功能:设置玩家自定义侧边栏临时计分板
 * 参数个数：3个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param title 侧边栏标题
 * @param list 列表字符串数组
 * 返回值：是否设置成功
 */
declare function setPlayerSidebar(uuid:string,title:string,list:string)
/**
 * 功能:清除玩家自定义侧边栏
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：是否清除成功
 */
declare function removePlayerSidebar(uuid:string)
/**
 * 功能:获取玩家权限与游戏模式
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：权限与模式的json字符串
 */
declare function getPlayerPermissionAndGametype(uuid:string)
/**
 * 功能:设置玩家权限与游戏模式
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param newModes 新权限或模式json数据字符串
 * 返回值：是否设置成功
 */
declare function setPlayerPermissionAndGametype(uuid:string,newModes:string)
/**
 * 功能:断开一个玩家的连接
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param tips 断开提示（设空值则为默认值）
 * 返回值：是否成功断开连接
 */
declare function disconnectClient(uuid:string,tips:string)
/**
 * 功能:发送一个原始显示文本给玩家
 * 参数个数：2个个参数
 * 返回值：是否发送成功
 */
declare function sendText()
/**
 * 功能:获取指定玩家指定计分板上的数值
 * 参数个数：2个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param objname 计分板登记的名称
 * 返回值：获取的目标值，若目标不存在则返回0
 */
declare function getscoreboard(uuid:string,objname:string)
/**
 * 功能:设置指定玩家指定计分板上的数值
 * 参数个数：3个个参数
 * @param uuid 在线玩家的uuid字符串
 * @param objname 计分板登记的名称
 * @param count 待设定的目标值
 * 返回值：是否设置成功
 */
declare function setscoreboard(uuid:string,objname:string,count:number)
/**
 * 功能:获取玩家IP
 * 参数个数：1个个参数
 * @param uuid 在线玩家的uuid字符串
 * 返回值：玩家IP
 */
declare function getPlayerIP(uuid:string)
/**
 * 功能:重命名一个指定的玩家名
 * 参数个数：2个
 * 返回值：是否命名成功
 * @param uuid 在线玩家的uuid字符串
 * @param newName 新的名称
 */
declare function reNameByUuid(uuid:string,newName:string)
/**
 * 功能:获取玩家能力表
 * 参数个数：1个
 * 返回值：能力json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerAbilities(uuid:string)
/**
 * 功能:设置玩家能力表
 * 参数个数：2个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param newAbilities 新能力json数据字符串
 */
declare function setPlayerAbilities(uuid:string,newAbilities:string)
/**
 * 功能:获取玩家属性表
 * 参数个数：1个
 * 返回值：属性json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerAttributes(uuid:string)
/**
 * 功能:设置玩家属性临时值表
 * 参数个数：2个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param newTempAttributes 新属性临时值json数据字符串
 */
declare function setPlayerTempAttributes(uuid:string,newTempAttributes:string)
/**
 * 功能:获取玩家属性上限值表
 * 参数个数：1个
 * 返回值：属性上限值json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerMaxAttributes(uuid:string)
/**
 * 功能:设置玩家属性上限值表
 * 参数个数：2个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param newMaxAttributes 新属性上限值json数据字符串
 */
declare function setPlayerMaxAttributes(uuid:string,newMaxAttributes:string)
/**
 * 功能:获取玩家所有物品列表
 * 参数个数：1个
 * 返回值：物品列表json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerItems(uuid:string)
/**
 * 功能:获取玩家当前选中项信息
 * 参数个数：1个
 * 返回值：当前选中项信息json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerSelectedItem(uuid:string)
/**
 * 功能:设置玩家所有物品列表
 * 参数个数：2个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param newItems 新物品列表json数据字符串
 */
declare function setPlayerItems(uuid:string,newItems:string)
/**
 * 功能:增加玩家一个物品
 * 参数个数：2个
 * 返回值：是否添加成功
 * @param uuid 在线玩家的uuid字符串
 * @param item 物品json数据字符串
 */
declare function addPlayerItemEx(uuid:string,item:string)
/**
 * 功能:增加玩家一个物品
 * 参数个数：4个
 * 返回值：是否增加成功
 * @param uuid 在线玩家的uuid字符串
 */
declare function addPlayerItem(uuid:string)
/**
 * 功能:获取玩家所有效果列表
 * 参数个数：1个
 * 返回值：效果列表json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerEffects(uuid:string)
/**
 * 功能:设置玩家所有效果列表
 * 参数个数：2个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param newEffects 新效果列表json数据字符串
 */
declare function setPlayerEffects(uuid:string,newEffects:string)
/**
 * 功能:设置玩家自定义血条
 * 参数个数：3个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param title 血条标题
 * @param percent 血条百分比
 */
declare function setPlayerBossBar(uuid:string,title:string,percent:number)
/**
 * 功能:清除玩家自定义血条
 * 参数个数：1个
 * 返回值：是否清除成功
 * @param uuid 在线玩家的uuid字符串
 */
declare function removePlayerBossBar(uuid:string)
/**
 * 功能:查询在线玩家基本信息
 * 参数个数：1个
 * 返回值：玩家基本信息json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function selectPlayer(uuid:string)
/**
 * 功能:传送玩家至指定服务器
 * 参数个数：3个
 * 返回值：是否传送成功
 * @param uuid 在线玩家的uuid字符串
 * @param addr 待传服务器
 * @param port 端口
 */
declare function transferserver(uuid:string,addr:string,port:number)
/**
 * 功能:传送玩家至指定坐标和维度
 * 参数个数：5个
 * 返回值：是否传送成功
 * @param uuid 在线玩家的uuid字符串
 * @param X x
 * @param Y y
 * @param Z z
 * @param dimensionid 维度ID
 */
declare function teleport(uuid:string,X:number,Y:number,Z:number,dimensionid:number)
/**
 * 功能:模拟玩家发送一个文本
 * 参数个数：2个
 * 返回值：是否发送成功
 * @param uuid 在线玩家的uuid字符串
 * @param msg 待模拟发送的文本
 */
declare function talkAs(uuid:string,msg:string)
/**
 * 功能:模拟玩家执行一个指令
 * 参数个数：2个
 * 返回值：是否发送成功
 * @param uuid 在线玩家的uuid字符串
 * @param cmd 待模拟执行的指令
 */
declare function runcmdAs(uuid:string,cmd:string)
/**
 * 功能:向指定的玩家发送一个简单表单
 * 参数个数：4个
 * 返回值：创建的表单id，为 0 表示发送失败
 * @param uuid 在线玩家的uuid字符串
 * @param title 表单标题
 * @param content 内容
 * @param buttons 按钮文本数组字符串
 */
declare function sendSimpleForm(uuid:string,title:string,content:string,buttons:string)
/**
 * 功能:向指定的玩家发送一个模式对话框
 * 参数个数：5个
 * 返回值：创建的表单id，为 0 表示发送失败
 */
declare function sendModalForm()
/**
 * 功能:向指定的玩家发送一个自定义表单
 * 参数个数：2个
 * 返回值：创建的表单id，为 0 表示发送失败
 */
declare function sendCustomForm()
/**
 * 功能:放弃一个表单
 * 参数个数：1个
 * 返回值：是否释放成功
 * @param formid 表单id
 */
declare function releaseForm(formid:number)
/**
 * 功能:设置玩家自定义侧边栏临时计分板
 * 参数个数：3个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param title 侧边栏标题
 * @param list 列表字符串数组
 */
declare function setPlayerSidebar(uuid:string,title:string,list:string)
/**
 * 功能:清除玩家自定义侧边栏
 * 参数个数：1个
 * 返回值：是否清除成功
 * @param uuid 在线玩家的uuid字符串
 */
declare function removePlayerSidebar(uuid:string)
/**
 * 功能:获取玩家权限与游戏模式
 * 参数个数：1个
 * 返回值：权限与模式的json字符串
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerPermissionAndGametype(uuid:string)
/**
 * 功能:设置玩家权限与游戏模式
 * 参数个数：2个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param newModes 新权限或模式json数据字符串
 */
declare function setPlayerPermissionAndGametype(uuid:string,newModes:string)
/**
 * 功能:断开一个玩家的连接
 * 参数个数：2个
 * 返回值：是否成功断开连接
 * @param uuid 在线玩家的uuid字符串
 * @param tips 断开提示（设空值则为默认值）
 */
declare function disconnectClient(uuid:string,tips:string)
/**
 * 功能:发送一个原始显示文本给玩家
 * 参数个数：2个
 * 返回值：是否发送成功
 */
declare function sendText()
/**
 * 功能:获取指定玩家指定计分板上的数值
 * 参数个数：2个
 * 返回值：获取的目标值，若目标不存在则返回0
 * @param uuid 在线玩家的uuid字符串
 * @param objname 计分板登记的名称
 */
declare function getscoreboard(uuid:string,objname:string)
/**
 * 功能:设置指定玩家指定计分板上的数值
 * 参数个数：3个
 * 返回值：是否设置成功
 * @param uuid 在线玩家的uuid字符串
 * @param objname 计分板登记的名称
 * @param count 待设定的目标值
 */
declare function setscoreboard(uuid:string,objname:string,count:number)
/**
 * 功能:获取玩家IP
 * 参数个数：1个
 * 返回值：玩家IP
 * @param uuid 在线玩家的uuid字符串
 */
declare function getPlayerIP(uuid:string)
